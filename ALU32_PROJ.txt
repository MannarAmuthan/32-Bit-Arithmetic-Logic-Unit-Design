module flag(clk,carry,in,out);
// flag register give 5 bit output  carry,zero, and three user defined flag
input[15:0] in;
output reg[4:0] out;
input carry,clk;


always@(posedge clk)
begin
if(in==16'h0000)
begin
out=5'b10000;
end
else
begin
out=5'b00000;
end

out[1]=carry;

end
endmodule

module ALU(en,clk,op1,op2,mode,dataout,carry,flagout);
input clk,en;
input[15:0] op1,op2;
input [2:0] mode;
output reg [15:0] dataout;
output reg carry;
output wire [4:0]flagout;

flag fl(clk,carry,dataout,flagout);
always@(posedge clk)
if(en==1'b1)
begin
  //addition
  if(mode==3'b001)
  begin
  {carry,dataout} = {1'b0,op1} + {1'b0,op2};
  end
  //subtraction
  else if(mode==3'b010)
  begin
 {carry,dataout} = {1'b0,op1} - {1'b0,op2};
  end
  //and
  else if(mode==3'b011)
  begin
  dataout=op1&op2; 
  end
  //or
  else if(mode==3'b100)
  begin
  dataout=op1|op2; 
  end
  //complement
  else if(mode==3'b101)
  begin
  dataout=~op1; 
  end


end




endmodule


module testALU;
reg en,clk;
wire carry;
wire [15:0] dataout;
reg [15:0] op1,op2;
reg[2:0] mode;
wire [4:0] flagout;

ALU st(en,clk,op1,op2,mode,dataout,carry,flagout);

initial
begin
$dumpfile("regalu.vcd");
$dumpvars(0,testALU);
$monitor("%d %d %d %d %d %d",$time,op1,op2,dataout,carry,flagout);
clk=1;
en=1;
op1=65535;
op2=0;
mode=3'b001;

#5

op1=05;
op2=04;
mode=3'b010;

#5

op1=127;
op2=255;
mode=3'b011; 

#5

op1=16'hFFFF;
mode=3'b101;

#5


$finish;
end
always
begin
#2 clk=~clk;
end

endmodule
//iverilog -o alu.vvp alu.v